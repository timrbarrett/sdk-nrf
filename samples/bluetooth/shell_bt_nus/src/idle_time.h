/*
    Code generated by Chat GPT 
    https://chat.openai.com/c/f26b5141-1e64-42b4-8dcb-dff62c575706

    intention is to baseline how many idle cycles are possible in a given time frame
    to understand how many CPU cycles are being consumed by the system providing
    shells and bluetooth services

    now I need to figure out how to add this file to cmake and build it

    also:-
    Enable System Idle Hook: First, ensure that the system idle hook 
    is enabled in your Zephyr application. This can be done by setting 
    CONFIG_PM=y and CONFIG_PM_DEVICE=y in your prj.conf file to enable 
    power management and the system idle thread.

    Use the System Idle Hook: Implement a function that will be called 
    by the system idle thread. Within this function, you can capture the 
    current tick count. You might also need to store the tick count when 
    the system exits idle mode to calculate the difference.

    Calculate Idle Ticks: By subtracting the tick count at the entry of 
    idle mode from the tick count at the exit, you can determine how many 
    ticks the system spent in idle mode.

*/

#include <zephyr/kernel.h>
#include <zephyr/sys/printk.h>

static uint32_t last_tick;
static uint32_t total_idle_ticks = 0;

/* Idle hook function, called each time the kernel enters the idle loop */
void idle_hook(void)
{
    uint32_t current_tick = k_uptime_get_32();

    if (last_tick != 0) {
        uint32_t idle_ticks = current_tick - last_tick;
        total_idle_ticks += idle_ticks;
    }

    last_tick = current_tick;
}

/* Main function moved to actual main section in main.c*/
//void main(void)
//{
//    /* Set the idle hook */
//    k_idle_hook_install(idle_hook);
//
//    while (1) {
//        k_sleep(K_SECONDS(1)); // Sleep to simulate work
//
//        printk("Total Idle Ticks in Last Second: %u\n", total_idle_ticks);
//        total_idle_ticks = 0; // Reset the counter after reporting
//    }
//}